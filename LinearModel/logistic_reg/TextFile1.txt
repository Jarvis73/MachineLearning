def Newton_iterate(X, Y, B, eps, max_it=10000):
    ''' 
    =================== 牛顿迭代 ====================
        输入:
            X       样例矩阵, 每行一个样例
            Y       样例类别, 向量
            B       初始参数值 (w; b)
            eps     容许的误差限
            max_it  最大迭代次数
        输出:
            B1      收敛的参数值 (w; b)
            i       实际迭代次数
    =============================================
    '''

    m = X.shape[0] # number of the samples
    X_hat = np.c_[X, np.ones(m)]

    def LB(B, X=X_hat, y=Y):
        ''' 目标函数 l(B) 极小化 '''
        _sum = 0
        for i in range(m):
            tmp = np.dot(B, X[i,:])
            _sum += (-y[i] * tmp + np.log(1 + np.exp(tmp)))
        return _sum

    def p(X, B):
        ''' p(y = 1 | X; B) '''
        tmp = np.exp(np.dot(B, X))
        return tmp / (1 + tmp)
    
    def plpB(B, X=X_hat, y=Y):
        ''' l 对 B 的一阶偏导数 '''
        lst = [ X[i,:] * (p(X[i,:].T, B) - y[i]) for i in range(m) ]
        return np.sum(lst, 0)
        
    def p2lpB2(B, X=x_hat):
        ''' l 对 B 的二阶偏导数 '''
        n = X.shape[1]
        _sum = np.zeros((n, n))
        for i in range(m):
            tmp = p(X[i,:], B)
            _sum += np.outer(X[i,:], X[i,:]) * tmp * (1 - tmp)
        return _sum
    
    def Worlf(B, alpha, p):
        ''' 判断是否满足 Worlf 条件 '''
        B1 = B + alpha * p
        Gfp = np.dot(plpB(B), p)
        flag1 = LB(B1) <= LB(B) + c1 * alpha * Gfp
        if not flag1:
            return False
        elif not np.dot(plpB(B1), p) >= c2 * Gfp:
            return False
        else:
            return True

    i, c1, c2, alpha = 0, 1e-4, 0.4, 1.0
    while True:
        p = -np.dot(np.linalg.inv(p2lpB2(B)), plpB(B))   # 牛顿步
        if Worlf(B, alpha, p):
            pass
        else:
            pass

        i += 1
        if i > max_it:  # 迭代不收敛
            print("Not converge with ", max_it, "iterations.")
            print("Error norm: ", norm(B1 - B))
            print("(W, b): ", B1)
            exit()
        if norm(B1 - B) <= eps:
            break
        
    return B1, i